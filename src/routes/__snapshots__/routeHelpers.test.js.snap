// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`routeHelpers matches snapshot routesConfig 1`] = `
Object {
  "privateRoutes": Array [
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(HomePage)",
        "type": [Function],
      },
      "path": "/home",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Reports)",
        "type": [Function],
      },
      "path": "/reports",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(YourDetails)",
        "type": [Function],
      },
      "path": "/your-account/your-details",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Billing)",
        "type": [Function],
      },
      "path": "/your-account/billing",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Subscriptions)",
        "type": [Function],
      },
      "path": "/your-account/billing/subscriptions",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(YourTeam)",
        "type": [Function],
      },
      "path": "/your-account/your-team",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Notifications)",
        "type": [Function],
      },
      "path": "/your-account/notifications",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(News)",
        "type": [Function],
      },
      "path": "/hub/news",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(SingleNews)",
        "type": [Function],
      },
      "path": "/hub/news/:id",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Grid)",
        "type": [Function],
      },
      "path": "/hub/grid/:name?",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Wiki)",
        "type": [Function],
      },
      "path": "/hub/wiki/:termId?",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(CapacityMarket)",
        "type": [Function],
      },
      "path": "/markets/capacity",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Balancing)",
        "type": [Function],
      },
      "path": "/markets/balancing/:name?",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(withRouter(FirmFrequency))",
        "type": [Function],
      },
      "path": "/markets/ffr",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(DynamicContaintment)",
        "type": [Function],
      },
      "path": "/markets/dynamic-containment",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Intraday)",
        "type": [Function],
      },
      "path": "/markets/intraday",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Overview)",
        "type": [Function],
      },
      "path": "/markets/overview",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(OurTeam)",
        "type": [Function],
      },
      "path": "/about/our-team",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Partners)",
        "type": [Function],
      },
      "path": "/about/partners",
    },
    Object {
      "component": [Function],
      "path": "/about/advisory-services",
    },
    Object {
      "component": [Function],
      "path": "/about/independence-data",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Leaderboard)",
        "type": [Function],
      },
      "path": "/assets/leaderboard",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Modomap)",
        "type": [Function],
      },
      "path": "/assets/modomap",
    },
  ],
  "publicRoutes": Array [
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Login)",
        "type": [Function],
      },
      "path": "/",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(LoadingDataPage)",
        "type": [Function],
      },
      "path": "/loading",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Login)",
        "type": [Function],
      },
      "path": "/login",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(withRouter(RedirectClass))",
        "type": [Function],
      },
      "path": "/sign-up",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(withRouter(RedirectClass))",
        "type": [Function],
      },
      "path": "/reset-password/:token?/:uid?",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(withRouter(RedirectClass))",
        "type": [Function],
      },
      "path": "/set-password/:token/:uid",
    },
    Object {
      "component": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(withRouter(RedirectClass))",
        "type": [Function],
      },
      "path": "/session-limit",
    },
  ],
}
`;

exports[`routeHelpers testing getPrivateRoutes 1`] = `
Array [
  <UNDEFINED
    component="Profile"
    exact={true}
    path="/profile"
  />,
]
`;

exports[`routeHelpers testing getPublicRoutes 1`] = `
Array [
  <Route
    component="SessionLimit"
    exact={true}
    path="/sessionLimit"
  />,
]
`;
